AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  apiKey:
    NoEcho: true
    Description: API secret
    Type: String

#Define the Required Resources
#1.Creating the required S3 Bucket
Resources:            
    #aws lambda role to access s3 bucket and secrets
  IngestS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ingest-bucket-foundary-prd

  MyLambdaFunctionRoleFoundaryPrd:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: 
          Fn::Sub: ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
      - PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject
            - s3:DeleteObject
            - s3:List*
            - s3:GetObject
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${IngestS3Bucket}"
              - !Sub "arn:aws:s3:::${IngestS3Bucket}/*"
          Version: '2012-10-17'
        PolicyName:
          Fn::Sub: ${AWS::StackName}-${AWS::Region}-AWSLambda-S3-Access
      - PolicyDocument:
          Statement:
          - Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:UpdateSecret
            - secretsmanager:PutSecretValue
            Effect: Allow
            Resource: arn:aws:secretsmanager:*:*:*
              
          Version: '2012-10-17'
        PolicyName: 
          Fn::Sub: ${AWS::StackName}-${AWS::Region}-AWSLambda-SecretAccess
      RoleName: 
        Fn::Sub: ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole
  
  SecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: API key to access ingestion data
      Name: "apiKeyIngest-foundary-prd"
      SecretString: !Join ["", ["{\"","rapidapiKey",  "\":","\"",!Ref apiKey,"\"}"]]
  
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Function to ingest data from api"
      FunctionName: IngestionAPIFoundary-prd
      Handler: function.ingest
      Code: 
        ZipFile: |
          import json
          def lambda_handler(event,context):
            return {'statuscode':200,'body':json.dumps('Hello from lambda!')}
  
      Role: !GetAtt MyLambdaFunctionRoleFoundaryPrd.Arn
      Runtime: python3.9 
      Layers: 
        - arn:aws:lambda:ap-southeast-2:336392948345:layer:AWSSDKPandas-Python39:6
      Timeout: 10
  
  Schedulerfunction:
    Type: AWS::Events::Rule
    Properties:
      Name: IngestionTriggerFoundaryPrd
      Description: "To Schedule the ingestion lambda function"
      ScheduleExpression: "cron(0 * * * ? *)"
      State: "ENABLED"
      Targets: 
         - Arn: !GetAtt Lambda.Arn
           Id: "LambdaTarget"
