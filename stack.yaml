Parameters:
  apiKey:
    NoEcho: true
    Description: API secret
    Type: String

  S3BucketName:
    Type: String
    Description: "S3 bucket to create"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"

  #Define the Required Resources
  #1.Creating the required S3 Bucket
  Resources:
    ScheduleLambdaTriggerRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - scheduler.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - lambda:InvokeFunction
             Effect: Allow
             Resource: 
              Fn::GetAtt:
                - LambdaInstSchedDispatcher
                - Arn
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSSchedule-Lambda
              

    #aws lambda role to access s3 bucket and secrets
    AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:List*
             Effect: Allow
             Resource:
             - !Sub arn:aws:s3:::${S3BucketCreate}
             - !Sub arn:aws:s3:::${S3BucketCreate}/*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
       - PolicyDocument:
           Statement:
           - Action:
             - secretsmanager:GetSecretValue
             - secretsmanager:DescribeSecret
             - secretsmanager:UpdateSecret
             - secretsmanager:PutSecretValue
             Effect: Allow
             Resource:
             - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-SecretAccess
       RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole
      


    S3BucketCreate:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Ref S3BucketName
    
    secret-store:
      Type: AWS::SecretManager::Secret
      Properties:
        Description: API key to access ingestion data
        SecretName: "apiKey"
      SecretString: !Ref apiKey

    Lambda:
      Type: AWS::Lambda::Function
      DependsOn: AWSLambdaExecutionRole
      Properties:
        Description: Function to ingest data from api
        FunctionName: Ingestion
        Handler: function.ingest
        Role:
          Fn::GetAtt:
            - AWSLambdaExecutionRole
            - 'Arn'
        Runtime: python3.9 
        Layers: 
          - arn:aws:lambda:ap-southeast-2:336392948345:layer:AWSSDKPandas-Python39:6
        Timeout: 10
    Scheduler:
      Type: AWS::Events::Rule
      DependsOn: Lambda
      Properties:
        Description: Function to ingest data from api
          Name: IngestionScheduler
          ScheduleExpression: cron(0 * * * *)
          State: Enabled
          Targets: 
            Fn::GetAtt:
                - Lambda
                - Arn


    
      


